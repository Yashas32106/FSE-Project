#!/usr/bin/env python3

import RPi.GPIO as GPIO
import time

# Pin definitions
TRIG = 11
ECHO = 12
BuzzerPin = 13
InfaredPin = 18
VibratorPin = 31

def setup():
    GPIO.setmode(GPIO.BOARD)
    # Setup for ultrasonic sensor
    GPIO.setup(TRIG, GPIO.OUT)
    GPIO.setup(ECHO, GPIO.IN)
    
    # Setup for buzzer
    GPIO.setup(BuzzerPin, GPIO.OUT)
    GPIO.output(BuzzerPin, GPIO.HIGH)

    # Setup for Vibrator
    GPIO.setup(VibratorPin, GPIO.OUT)
    GPIO.output(VibratorPin, GPIO.HIGH)

    # Setup for Infrared
    GPIO.setup(InfaredPin, GPIO.IN)

def distance():
    GPIO.output(TRIG, 0)
    time.sleep(0.000002)
    GPIO.output(TRIG, 1)
    time.sleep(0.00001)
    GPIO.output(TRIG, 0)

    start_time = time.time()
    stop_time = time.time()

    while GPIO.input(ECHO) == 0:
        start_time = time.time()

    while GPIO.input(ECHO) == 1:
        stop_time = time.time()

    elapsed_time = stop_time - start_time
    return (elapsed_time * 34000) / 2  # Convert to cm

def buzzer_on():
    GPIO.output(BuzzerPin, GPIO.LOW)

def buzzer_off():
    GPIO.output(BuzzerPin, GPIO.HIGH)

def beep(duration):
    buzzer_on()
    time.sleep(duration)
    buzzer_off()

def vibrator_on():
    GPIO.output(VibratorPin, GPIO.HIGH)

def vibrator_off():
    GPIO.output(VibratorPin, GPIO.LOW)

def vibrator(duration):
    vibrator_on()
    time.sleep(duration)
    vibrator_off()

def loop():
    last_distance_time = time.time()
    last_motion_time = time.time()
    motion_detected = False

    while True:
        current_time = time.time()

        # Handle ultrasonic distance measurement every 100 ms
        if current_time - last_distance_time >= 0.1:
            dis = distance()
            print(f"Distance: {dis:.2f} cm")
            last_distance_time = current_time

            # Vibrator control based on distance
            if dis < 100:
                vibrator(0.01)
            elif dis < 300:
                vibrator(0.5)
            elif dis < 500:
                vibrator(1)
            else:
                vibrator_off()

        # Check infrared sensor state continuously
        motion = GPIO.input(InfaredPin)
        if motion == 1 and not motion_detected:
            motion_detected = True
            print("Motion detected")
            beep(0.5)
        elif motion == 0 and motion_detected:
            motion_detected = False

        time.sleep(0.01)  # Avoid CPU overutilization

def destroy():
    GPIO.cleanup()
    print("GPIO cleanup completed")

if __name__ == "__main__":
    setup()
    vibrator_off()
    try:
        loop()
    except KeyboardInterrupt:
        print("Program interrupted by user")
    finally:
        destroy()

